{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sarabastian/Flatiron/code/final-project/frontend/src/components/CommentCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    overflow: 'hidden',\n    padding: theme.spacing(0, 3)\n  },\n  paper: {\n    maxWidth: 400,\n    margin: `${theme.spacing(1)}px auto`,\n    padding: theme.spacing(2)\n  }\n}));\nconst message = `Truncation should be conditionally applicable on this long line of text\n as this is a much longer line than what the container can support. `;\nexport default function CommmentCard(props) {\n  _s();\n\n  const classes = useStyles();\n  const [allCommenters, setAllCommenters] = useState([]);\n  useEffect(() => {\n    fetch(`http://localhost:3001/api/v1/projects/${props.project.id}`).then(res => res.json()).then(project => setAllCommenters(project.commenters));\n  }, []);\n  let thisCommenter = allCommenters.filter(commenter => commenter.id == props.comment.user_id); //   console.log(thisCommenter)\n  //   console.log(props.comment)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        wrap: \"nowrap\",\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: thisCommenter.length == 1 ? /*#__PURE__*/_jsxDEV(Avatar, {\n            src: thisCommenter[0].profile_pic\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 40\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          zeroMinWidth: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: [props.comment.blurb, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 14\n            }, this), \"-\", thisCommenter.length == 1 ? thisCommenter[0].name : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CommmentCard, \"VOcAkfc70cDBczAyolkwohoBokA=\", false, function () {\n  return [useStyles];\n});\n\n_c = CommmentCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommmentCard\");","map":{"version":3,"sources":["/Users/sarabastian/Flatiron/code/final-project/frontend/src/components/CommentCard.js"],"names":["React","useState","useEffect","Paper","makeStyles","Grid","Avatar","Typography","useStyles","theme","root","flexGrow","overflow","padding","spacing","paper","maxWidth","margin","message","CommmentCard","props","classes","allCommenters","setAllCommenters","fetch","project","id","then","res","json","commenters","thisCommenter","filter","commenter","comment","user_id","length","profile_pic","blurb","name"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,MAAMC,SAAS,GAAGJ,UAAU,CAAEK,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,CADN;AAEJC,IAAAA,QAAQ,EAAE,QAFN;AAGJC,IAAAA,OAAO,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd,EAAiB,CAAjB;AAHL,GADiC;AAMvCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,GADL;AAELC,IAAAA,MAAM,EAAG,GAAER,KAAK,CAACK,OAAN,CAAc,CAAd,CAAiB,SAFvB;AAGLD,IAAAA,OAAO,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd;AAHJ;AANgC,CAAZ,CAAD,CAA5B;AAaA,MAAMI,OAAO,GAAI;AACjB,qEADA;AAGA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC1C,QAAMC,OAAO,GAAGb,SAAS,EAAzB;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAAC,EAAD,CAAlD;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,KAAK,CAAE,yCAAwCJ,KAAK,CAACK,OAAN,CAAcC,EAAG,EAA3D,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQF,OAAO,IAAIF,gBAAgB,CAACE,OAAO,CAACK,UAAT,CAFnC;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,MAAIC,aAAa,GAAGT,aAAa,CAACU,MAAd,CAAqBC,SAAS,IAAIA,SAAS,CAACP,EAAV,IAAgBN,KAAK,CAACc,OAAN,CAAcC,OAAhE,CAApB,CAT0C,CAU5C;AAEA;;AACE,sBACE;AAAK,IAAA,SAAS,EAAEd,OAAO,CAACX,IAAxB;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAEW,OAAO,CAACN,KAA1B;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,IAAI,EAAC,QAArB;AAA8B,QAAA,OAAO,EAAE,CAAvC;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAA,oBACCgB,aAAa,CAACK,MAAd,IAAwB,CAAxB,gBAA4B,QAAC,MAAD;AAAQ,YAAA,GAAG,EAAEL,aAAa,CAAC,CAAD,CAAb,CAAiBM;AAA9B;AAAA;AAAA;AAAA;AAAA,kBAA5B,GAAmF;AADpF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,MAAb;AAAc,UAAA,YAAY,MAA1B;AAAA,iCACE,QAAC,UAAD;AAAA,uBAAcjB,KAAK,CAACc,OAAN,CAAcI,KAA5B,eACC;AAAA;AAAA;AAAA;AAAA,oBADD,OACYP,aAAa,CAACK,MAAd,IAAwB,CAAxB,GAA4BL,aAAa,CAAC,CAAD,CAAb,CAAiBQ,IAA7C,GAAoD,IADhE;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GA9BuBpB,Y;UACNX,S;;;KADMW,Y","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    overflow: 'hidden',\n    padding: theme.spacing(0, 3),\n  },\n  paper: {\n    maxWidth: 400,\n    margin: `${theme.spacing(1)}px auto`,\n    padding: theme.spacing(2),\n  },\n}));\n\nconst message = `Truncation should be conditionally applicable on this long line of text\n as this is a much longer line than what the container can support. `;\n\nexport default function CommmentCard(props) {\n  const classes = useStyles();\n  const [allCommenters, setAllCommenters] = useState([]);\n  useEffect(() => {\n    fetch(`http://localhost:3001/api/v1/projects/${props.project.id}`)\n      .then(res => res.json())\n      .then(project => setAllCommenters(project.commenters));\n  }, []);\n\n  let thisCommenter = allCommenters.filter(commenter => commenter.id == props.comment.user_id )\n//   console.log(thisCommenter)\n\n//   console.log(props.comment)\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <Grid container wrap=\"nowrap\" spacing={2}>\n          <Grid item>\n          {thisCommenter.length == 1 ? <Avatar src={thisCommenter[0].profile_pic}></Avatar> : null }\n          </Grid>\n          <Grid item xs zeroMinWidth>\n            <Typography >{props.comment.blurb} \n             <br></br>-{thisCommenter.length == 1 ? thisCommenter[0].name : null}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n     \n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}