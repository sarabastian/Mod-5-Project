{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sarabastian/Flatiron/code/final-project/frontend/src/containers/Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase'; // const useSearchStyles = makeStyles((theme) => ({\n//     root: {\n//       width: 280,\n//       '& > * + *': {\n//         marginTop: theme.spacing(3),\n//       },\n//     },\n//   }));\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto'\n    }\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  inputRoot: {\n    color: 'inherit'\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing()}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '12ch',\n      '&:focus': {\n        width: '20ch'\n      }\n    }\n  }\n}));\nexport default function Search() {\n  _s();\n\n  useEffect(() => {\n    fetch('http://localhost:3001/api/v1/projects/').then(res => res.json()).then(projects => setProjects(projects));\n  }, []);\n  const classes = useStyles(); // const searchClasses = useSearchStyles();\n\n  const [projects, setProjects] = React.useState([]);\n\n  const onSearch = search => {// fetchOptions(search).then(setOptions);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.search,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.searchIcon,\n        children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(InputBase, {\n        placeholder: \"Search for projects by language\",\n        classes: {\n          root: classes.inputRoot,\n          input: classes.inputInput\n        },\n        inputProps: {\n          'aria-label': 'search'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this) //         <div className={searchClasses.root}>\n  //       <Autocomplete\n  //         multiple\n  //         limitTags={2}\n  //         id=\"multiple-limit-tags\"\n  //         options={projects}\n  //         getOptionLabel={(option) => option.language}\n  //         // handleParams(option.language)\n  //         // defaultValue={[top100Films[13], top100Films[12], top100Films[11]]}\n  //         renderInput={(params) => (\n  //           <TextField {...params}  onChange={(event) => onSearch(event.currentTarget.value)} color='secondary' placeholder=\"Search Projects by language\" />\n  //         )}\n  //       />\n  //       <IconButton><SearchIcon />\n  //       </IconButton>\n  // </div>\n  ;\n}\n\n_s(Search, \"B/XYn12OVzBeJYRrObSz/CaSgo4=\", false, function () {\n  return [useStyles];\n});\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/sarabastian/Flatiron/code/final-project/frontend/src/containers/Search.js"],"names":["React","useEffect","fade","makeStyles","SearchIcon","TextField","Autocomplete","IconButton","InputBase","useStyles","theme","root","flexGrow","search","position","borderRadius","shape","backgroundColor","palette","common","white","marginLeft","width","breakpoints","up","spacing","searchIcon","padding","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","Search","fetch","then","res","json","projects","setProjects","classes","useState","onSearch","input"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\n\n\n\n\n// const useSearchStyles = makeStyles((theme) => ({\n//     root: {\n//       width: 280,\n//       '& > * + *': {\n//         marginTop: theme.spacing(3),\n//       },\n//     },\n//   }));\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n\n    },\n    search: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginLeft: 0,\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(1),\n        width: 'auto',\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: '100%',\n      position: 'absolute',\n      pointerEvents: 'none',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    inputRoot: {\n      color: 'inherit',\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing()}px)`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '12ch',\n        '&:focus': {\n          width: '20ch',\n        },\n      },\n    },\n  }));\n\n\nexport default function Search() {\n    useEffect(() => {\n        fetch('http://localhost:3001/api/v1/projects/')\n          .then(res => res.json())\n          .then(projects => setProjects(projects));\n      }, []);\n\n    const classes = useStyles();\n    // const searchClasses = useSearchStyles();\n\n    const [projects, setProjects] = React.useState([]) ;\n    const onSearch = (search: string) => {\n        // fetchOptions(search).then(setOptions);\n      };\n\n    \n   \n\n\n\n    return (\n        <div className={classes.root}>\n\n\n<div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Search for projects by language\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n            />\n          </div>\n          </div>\n\n\n\n\n\n\n\n\n\n\n\n\n//         <div className={searchClasses.root}>\n          \n//       <Autocomplete\n        \n//         multiple\n//         limitTags={2}\n//         id=\"multiple-limit-tags\"\n//         options={projects}\n//         getOptionLabel={(option) => option.language}\n//         // handleParams(option.language)\n        \n\n//         // defaultValue={[top100Films[13], top100Films[12], top100Films[11]]}\n \n//         renderInput={(params) => (\n//           <TextField {...params}  onChange={(event) => onSearch(event.currentTarget.value)} color='secondary' placeholder=\"Search Projects by language\" />\n       \n        \n//         )}\n  \n//       />\n//       <IconButton><SearchIcon />\n      \n//       </IconButton>\n \n\n// </div>\n\n             \n\n    )\n}"]},"metadata":{},"sourceType":"module"}